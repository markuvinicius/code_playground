/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.markuvinicius.playground.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TwitterUser extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4403108279900278305L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TwitterUser\",\"namespace\":\"com.markuvinicius.playground.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"User identification number on Twitter platform\",\"default\":-1},{\"name\":\"createdAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The point in time the user was created on Twitter platform\",\"default\":\"\"},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The language spoken by the user\",\"default\":\"\"},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The user's email\",\"default\":null},{\"name\":\"followersCount\",\"type\":\"int\",\"doc\":\"The number of followers the user has\",\"default\":0},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The user's name\",\"default\":\"\"},{\"name\":\"screenName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The User's name shown on screen\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TwitterUser> ENCODER =
      new BinaryMessageEncoder<TwitterUser>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TwitterUser> DECODER =
      new BinaryMessageDecoder<TwitterUser>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TwitterUser> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TwitterUser> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TwitterUser>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TwitterUser to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TwitterUser from a ByteBuffer. */
  public static TwitterUser fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** User identification number on Twitter platform */
   private long id;
  /** The point in time the user was created on Twitter platform */
   private java.lang.String createdAt;
  /** The language spoken by the user */
   private java.lang.String language;
  /** The user's email */
   private java.lang.String email;
  /** The number of followers the user has */
   private int followersCount;
  /** The user's name */
   private java.lang.String name;
  /** The User's name shown on screen */
   private java.lang.String screenName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TwitterUser() {}

  /**
   * All-args constructor.
   * @param id User identification number on Twitter platform
   * @param createdAt The point in time the user was created on Twitter platform
   * @param language The language spoken by the user
   * @param email The user's email
   * @param followersCount The number of followers the user has
   * @param name The user's name
   * @param screenName The User's name shown on screen
   */
  public TwitterUser(java.lang.Long id, java.lang.String createdAt, java.lang.String language, java.lang.String email, java.lang.Integer followersCount, java.lang.String name, java.lang.String screenName) {
    this.id = id;
    this.createdAt = createdAt;
    this.language = language;
    this.email = email;
    this.followersCount = followersCount;
    this.name = name;
    this.screenName = screenName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return createdAt;
    case 2: return language;
    case 3: return email;
    case 4: return followersCount;
    case 5: return name;
    case 6: return screenName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: createdAt = (java.lang.String)value$; break;
    case 2: language = (java.lang.String)value$; break;
    case 3: email = (java.lang.String)value$; break;
    case 4: followersCount = (java.lang.Integer)value$; break;
    case 5: name = (java.lang.String)value$; break;
    case 6: screenName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return User identification number on Twitter platform
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Gets the value of the 'createdAt' field.
   * @return The point in time the user was created on Twitter platform
   */
  public java.lang.String getCreatedAt() {
    return createdAt;
  }


  /**
   * Gets the value of the 'language' field.
   * @return The language spoken by the user
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Gets the value of the 'email' field.
   * @return The user's email
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Gets the value of the 'followersCount' field.
   * @return The number of followers the user has
   */
  public java.lang.Integer getFollowersCount() {
    return followersCount;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The user's name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'screenName' field.
   * @return The User's name shown on screen
   */
  public java.lang.String getScreenName() {
    return screenName;
  }


  /**
   * Creates a new TwitterUser RecordBuilder.
   * @return A new TwitterUser RecordBuilder
   */
  public static com.markuvinicius.playground.avro.TwitterUser.Builder newBuilder() {
    return new com.markuvinicius.playground.avro.TwitterUser.Builder();
  }

  /**
   * Creates a new TwitterUser RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TwitterUser RecordBuilder
   */
  public static com.markuvinicius.playground.avro.TwitterUser.Builder newBuilder(com.markuvinicius.playground.avro.TwitterUser.Builder other) {
    return new com.markuvinicius.playground.avro.TwitterUser.Builder(other);
  }

  /**
   * Creates a new TwitterUser RecordBuilder by copying an existing TwitterUser instance.
   * @param other The existing instance to copy.
   * @return A new TwitterUser RecordBuilder
   */
  public static com.markuvinicius.playground.avro.TwitterUser.Builder newBuilder(com.markuvinicius.playground.avro.TwitterUser other) {
    return new com.markuvinicius.playground.avro.TwitterUser.Builder(other);
  }

  /**
   * RecordBuilder for TwitterUser instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TwitterUser>
    implements org.apache.avro.data.RecordBuilder<TwitterUser> {

    /** User identification number on Twitter platform */
    private long id;
    /** The point in time the user was created on Twitter platform */
    private java.lang.String createdAt;
    /** The language spoken by the user */
    private java.lang.String language;
    /** The user's email */
    private java.lang.String email;
    /** The number of followers the user has */
    private int followersCount;
    /** The user's name */
    private java.lang.String name;
    /** The User's name shown on screen */
    private java.lang.String screenName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.markuvinicius.playground.avro.TwitterUser.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[1].schema(), other.createdAt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.followersCount)) {
        this.followersCount = data().deepCopy(fields()[4].schema(), other.followersCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.screenName)) {
        this.screenName = data().deepCopy(fields()[6].schema(), other.screenName);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TwitterUser instance
     * @param other The existing instance to copy.
     */
    private Builder(com.markuvinicius.playground.avro.TwitterUser other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[1].schema(), other.createdAt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.followersCount)) {
        this.followersCount = data().deepCopy(fields()[4].schema(), other.followersCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.screenName)) {
        this.screenName = data().deepCopy(fields()[6].schema(), other.screenName);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * User identification number on Twitter platform
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * User identification number on Twitter platform
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * User identification number on Twitter platform
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * User identification number on Twitter platform
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * The point in time the user was created on Twitter platform
      * @return The value.
      */
    public java.lang.String getCreatedAt() {
      return createdAt;
    }

    /**
      * Sets the value of the 'createdAt' field.
      * The point in time the user was created on Twitter platform
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setCreatedAt(java.lang.String value) {
      validate(fields()[1], value);
      this.createdAt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * The point in time the user was created on Twitter platform
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * The point in time the user was created on Twitter platform
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * The language spoken by the user
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }

    /**
      * Sets the value of the 'language' field.
      * The language spoken by the user
      * @param value The value of 'language'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setLanguage(java.lang.String value) {
      validate(fields()[2], value);
      this.language = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * The language spoken by the user
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'language' field.
      * The language spoken by the user
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * The user's email
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * The user's email
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setEmail(java.lang.String value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * The user's email
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * The user's email
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'followersCount' field.
      * The number of followers the user has
      * @return The value.
      */
    public java.lang.Integer getFollowersCount() {
      return followersCount;
    }

    /**
      * Sets the value of the 'followersCount' field.
      * The number of followers the user has
      * @param value The value of 'followersCount'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setFollowersCount(int value) {
      validate(fields()[4], value);
      this.followersCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'followersCount' field has been set.
      * The number of followers the user has
      * @return True if the 'followersCount' field has been set, false otherwise.
      */
    public boolean hasFollowersCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'followersCount' field.
      * The number of followers the user has
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearFollowersCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The user's name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * The user's name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setName(java.lang.String value) {
      validate(fields()[5], value);
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The user's name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'name' field.
      * The user's name
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearName() {
      name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'screenName' field.
      * The User's name shown on screen
      * @return The value.
      */
    public java.lang.String getScreenName() {
      return screenName;
    }

    /**
      * Sets the value of the 'screenName' field.
      * The User's name shown on screen
      * @param value The value of 'screenName'.
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder setScreenName(java.lang.String value) {
      validate(fields()[6], value);
      this.screenName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'screenName' field has been set.
      * The User's name shown on screen
      * @return True if the 'screenName' field has been set, false otherwise.
      */
    public boolean hasScreenName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'screenName' field.
      * The User's name shown on screen
      * @return This builder.
      */
    public com.markuvinicius.playground.avro.TwitterUser.Builder clearScreenName() {
      screenName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TwitterUser build() {
      try {
        TwitterUser record = new TwitterUser();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.createdAt = fieldSetFlags()[1] ? this.createdAt : (java.lang.String) defaultValue(fields()[1]);
        record.language = fieldSetFlags()[2] ? this.language : (java.lang.String) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.String) defaultValue(fields()[3]);
        record.followersCount = fieldSetFlags()[4] ? this.followersCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.name = fieldSetFlags()[5] ? this.name : (java.lang.String) defaultValue(fields()[5]);
        record.screenName = fieldSetFlags()[6] ? this.screenName : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TwitterUser>
    WRITER$ = (org.apache.avro.io.DatumWriter<TwitterUser>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TwitterUser>
    READER$ = (org.apache.avro.io.DatumReader<TwitterUser>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
